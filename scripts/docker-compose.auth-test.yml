version: "3.8"

services:
  # PostgreSQL for development
  db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_DB: prismeet
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    networks:
      - prismeet-network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "6379:6379"
    networks:
      - prismeet-network

  # Authentication Service
  auth_service:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
    env_file:
      - ./.env
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/prismeet
      - REDIS_URL=redis://redis:6379/0
      - DEBUG=True
      - DJANGO_SETTINGS_MODULE=auth_service.settings
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8000
    volumes:
      - ./services/auth_service:/app
      - ./media:/media
      - ./static:/static
    working_dir: /app
    command: >
      bash -lc "
        python manage.py makemigrations &&
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        python manage.py runserver 0.0.0.0:8001
      "
    ports:
      - "8001:8001"
    depends_on:
      - db
      - redis
    networks:
      - prismeet-network

  # Django Main Backend (Gateway)
  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
    env_file:
      - ./.env
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/prismeet
      - REDIS_URL=redis://redis:6379/1
      - DEBUG=True
      - AUTH_SERVICE_URL=http://auth_service:8001
      - CORS_ALLOWED_ORIGINS=http://localhost:3000
    volumes:
      - ./backend:/app
      - ./media:/media
      - ./static:/static
    working_dir: /app
    command: >
      bash -lc "
        python manage.py makemigrations &&
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        python manage.py runserver 0.0.0.0:8000
      "
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
      - auth_service
    networks:
      - prismeet-network

  # Next.js Frontend (dev)
  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
    env_file:
      - ./.env
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_AUTH_SERVICE_URL=http://localhost:8001
      - NEXT_PUBLIC_BACKEND_URL=http://localhost:8000
    volumes:
      - ./frontend:/app
      - node_modules:/app/node_modules
    working_dir: /app
    command: npm run dev
    ports:
      - "3000:3000"
    depends_on:
      - backend
      - auth_service
    networks:
      - prismeet-network

volumes:
  postgres_data:
  node_modules:

networks:
  prismeet-network:
    driver: bridge