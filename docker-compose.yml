version: "3.8"

services:
  # PostgreSQL for development
  db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_DB: prismeet
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    networks:
      - prismeet-network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "6379:6379"
    networks:
      - prismeet-network

  # Authentication Service
  auth_service:
    build:
      context: ./services/auth_service
      dockerfile: Dockerfile
    env_file:
      - ./.env
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/prismeet
      - REDIS_URL=redis://redis:6379/0
      - DEBUG=True
      - DJANGO_SETTINGS_MODULE=config.settings
    volumes:
      - ./services/auth_service:/app
      - ./media:/media
      - ./static:/static
    working_dir: /app
    command: >
      bash -lc "
        python manage.py makemigrations &&
        python manage.py migrate &&
        python manage.py runserver 0.0.0.0:8001
      "
    ports:
      - "8001:8001"
    depends_on:
      - db
      - redis
    networks:
      - prismeet-network
#
#  # AI Service (uncomment when ready)
#  ai_service:
#    build:
#      context: ./services/ai_service
#      dockerfile: Dockerfile
#    env_file:
#      - ./.env
#    environment:
#      - DATABASE_URL=postgresql://postgres:postgres@db:5432/prismeet
#      - REDIS_URL=redis://redis:6379/1
#      - DEBUG=True
#      - DJANGO_SETTINGS_MODULE=ai_service.settings
#    volumes:
#      - ./services/ai_service:/app
#      - ./media:/media
#    working_dir: /app
#    command: >
#      bash -lc "
#        python manage.py makemigrations &&
#        python manage.py migrate &&
#        python manage.py runserver 0.0.0.0:8002
#      "
#    ports:
#      - "8002:8002"
#    depends_on:
#      - db
#      - redis
#    networks:
#      - prismeet-network
#
#  # Media Service (uncomment when ready)
#  media_service:
#    build:
#      context: ./services/media_service
#      dockerfile: Dockerfile
#    env_file:
#      - ./.env
#    environment:
#      - DATABASE_URL=postgresql://postgres:postgres@db:5432/prismeet
#      - REDIS_URL=redis://redis:6379/2
#      - DEBUG=True
#      - DJANGO_SETTINGS_MODULE=media_service.settings
#    volumes:
#      - ./services/media_service:/app
#      - ./media:/media
#      - ./static:/static
#    working_dir: /app
#    command: >
#      bash -lc "
#        python manage.py makemigrations &&
#        python manage.py migrate &&
#        python manage.py runserver 0.0.0.0:8003
#      "
#    ports:
#      - "8003:8003"
#    depends_on:
#      - db
#      - redis
#    networks:
#      - prismeet-network
#
#  # Meeting Service (uncomment when ready)
#  meeting_service:
#    build:
#      context: ./services/meeting_service
#      dockerfile: Dockerfile
#    env_file:
#      - ./.env
#    environment:
#      - DATABASE_URL=postgresql://postgres:postgres@db:5432/prismeet
#      - REDIS_URL=redis://redis:6379/3
#      - DEBUG=True
#      - DJANGO_SETTINGS_MODULE=meeting_service.settings
#    volumes:
#      - ./services/meeting_service:/app
#      - ./media:/media
#    working_dir: /app
#    command: >
#      bash -lc "
#        python manage.py makemigrations &&
#        python manage.py migrate &&
#        python manage.py runserver 0.0.0.0:8004
#      "
#    ports:
#      - "8004:8004"
#    depends_on:
#      - db
#      - redis
#    networks:
#      - prismeet-network
#
#  # Recording Service (uncomment when ready)
#  recording_service:
#    build:
#      context: ./services/recording_service
#      dockerfile: Dockerfile
#    env_file:
#      - ./.env
#    environment:
#      - DATABASE_URL=postgresql://postgres:postgres@db:5432/prismeet
#      - REDIS_URL=redis://redis:6379/4
#      - DEBUG=True
#      - DJANGO_SETTINGS_MODULE=recording_service.settings
#    volumes:
#      - ./services/recording_service:/app
#      - ./media:/media
#    working_dir: /app
#    command: >
#      bash -lc "
#        python manage.py makemigrations &&
#        python manage.py migrate &&
#        python manage.py runserver 0.0.0.0:8005
#      "
#    ports:
#      - "8005:8005"
#    depends_on:
#      - db
#      - redis
#    networks:
#      - prismeet-network
#
#  # Transcription Service (uncomment when ready)
#  transcription_service:
#    build:
#      context: ./services/transcription_service
#      dockerfile: Dockerfile
#    env_file:
#      - ./.env
#    environment:
#      - DATABASE_URL=postgresql://postgres:postgres@db:5432/prismeet
#      - REDIS_URL=redis://redis:6379/5
#      - DEBUG=True
#      - DJANGO_SETTINGS_MODULE=transcription_service.settings
#    volumes:
#      - ./services/transcription_service:/app
#      - ./media:/media
#    working_dir: /app
#    command: >
#      bash -lc "
#        python manage.py makemigrations &&
#        python manage.py migrate &&
#        python manage.py runserver 0.0.0.0:8006
#      "
#    ports:
#      - "8006:8006"
#    depends_on:
#      - db
#      - redis
#    networks:
#      - prismeet-network

  # Next.js Frontend
  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
    env_file:
      - ./.env
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:80
      - NEXT_PUBLIC_AUTH_SERVICE_URL=http://localhost:80/api/auth
      - NEXT_PUBLIC_WS_URL=ws://localhost:80
    volumes:
      - ./frontend:/app
    working_dir: /app
    command: npm run dev
    ports:
      - "3000:3000"
    depends_on:
      - auth_service
    networks:
      - prismeet-network

  # Nginx Gateway
  gateway:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./gateway/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - auth_service
      - frontend
    networks:
      - prismeet-network

volumes:
  postgres_data:

networks:
  prismeet-network:
    driver: bridge