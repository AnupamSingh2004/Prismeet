version: "3.8"

services:
  # Authentication Service Database
  auth_db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_DB: prismeet_auth
      POSTGRES_USER: auth_user
      POSTGRES_PASSWORD: auth_password
    volumes:
      - auth_postgres_data:/var/lib/postgresql/data/
    ports:
      - "5433:5432"
    networks:
      - auth-network

  # Meeting Service Database
  meeting_db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_DB: prismeet_meeting
      POSTGRES_USER: meeting_user
      POSTGRES_PASSWORD: meeting_password
    volumes:
      - meeting_postgres_data:/var/lib/postgresql/data/
    ports:
      - "5434:5432"
    networks:
      - meeting-network
#
#  # AI Service Database
#  ai_db:
#    image: postgres:15
#    restart: always
#    environment:
#      POSTGRES_DB: prismeet_ai
#      POSTGRES_USER: ai_user
#      POSTGRES_PASSWORD: ai_password
#    volumes:
#      - ai_postgres_data:/var/lib/postgresql/data/
#    ports:
#      - "5435:5432"
#    networks:
#      - ai-network
#
#  # Media Service Database
#  media_db:
#    image: postgres:15
#    restart: always
#    environment:
#      POSTGRES_DB: prismeet_media
#      POSTGRES_USER: media_user
#      POSTGRES_PASSWORD: media_password
#    volumes:
#      - media_postgres_data:/var/lib/postgresql/data/
#    ports:
#      - "5436:5432"
#    networks:
#      - media-network
#
#  # Recording Service Database
#  recording_db:
#    image: postgres:15
#    restart: always
#    environment:
#      POSTGRES_DB: prismeet_recording
#      POSTGRES_USER: recording_user
#      POSTGRES_PASSWORD: recording_password
#    volumes:
#      - recording_postgres_data:/var/lib/postgresql/data/
#    ports:
#      - "5437:5432"
#    networks:
#      - recording-network
#
#  # Transcription Service Database
#  transcription_db:
#    image: postgres:15
#    restart: always
#    environment:
#      POSTGRES_DB: prismeet_transcription
#      POSTGRES_USER: transcription_user
#      POSTGRES_PASSWORD: transcription_password
#    volumes:
#      - transcription_postgres_data:/var/lib/postgresql/data/
#    ports:
#      - "5438:5432"
#    networks:
#      - transcription-network

  # Shared Redis for inter-service communication only
  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "6379:6379"
    networks:
      - shared-network


  auth_service:
    build:
      context: ./services/auth_service
      dockerfile: Dockerfile
    environment:
      # Override with correct variable names for auth service
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_DEBUG=${DJANGO_DEBUG}
      - DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0,auth_service,meeting_service,nginx,auth_service:8001,meeting_service:8004
      - POSTGRES_DB=prismeet_auth
      - POSTGRES_USER=auth_user
      - POSTGRES_PASSWORD=auth_password
      - POSTGRES_HOST=auth_db
      - POSTGRES_PORT=5432
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - GOOGLE_OAUTH2_CLIENT_ID=${GOOGLE_OAUTH2_CLIENT_ID}
      - GOOGLE_OAUTH2_CLIENT_SECRET=${GOOGLE_OAUTH2_CLIENT_SECRET}
      - FRONTEND_URL=${FRONTEND_URL}
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./services/auth_service:/app
      - auth_media:/app/media
      - auth_static:/app/static
    working_dir: /app
    command: >
      bash -lc "
        python manage.py makemigrations &&
        python manage.py migrate &&
        python manage.py runserver 0.0.0.0:8001
      "
    ports:
      - "8001:8001"
    depends_on:
      - auth_db
      - redis
    networks:
      - auth-network
      - shared-network
#
#  # AI Service
#  ai_service:
#    build:
#      context: ./services/ai_service
#      dockerfile: Dockerfile
#    env_file:
#      - ./services/ai_service/.env
#    volumes:
#      - ./services/ai_service:/app
#      - ai_media:/app/media
#    working_dir: /app
#    command: >
#      bash -lc "
#        python manage.py makemigrations &&
#        python manage.py migrate &&
#        python manage.py runserver 0.0.0.0:8002
#      "
#    ports:
#      - "8002:8002"
#    depends_on:
#      - ai_db
#      - redis
#    networks:
#      - ai-network
#      - shared-network
#
#  # Media Service
#  media_service:
#    build:
#      context: ./services/media_service
#      dockerfile: Dockerfile
#    env_file:
#      - ./services/media_service/.env
#    volumes:
#      - ./services/media_service:/app
#      - media_media:/app/media
#      - media_static:/app/static
#    working_dir: /app
#    command: >
#      bash -lc "
#        python manage.py makemigrations &&
#        python manage.py migrate &&
#        python manage.py runserver 0.0.0.0:8003
#      "
#    ports:
#      - "8003:8003"
#    depends_on:
#      - media_db
#      - redis
#    networks:
#      - media-network
#      - shared-network

  # Meeting Service
  meeting_service:
    build:
      context: ./services/meeting_service
      dockerfile: Dockerfile
    environment:
      # Override with correct variable names for meeting service
      - SECRET_KEY=${DJANGO_SECRET_KEY}
      - DEBUG=${DJANGO_DEBUG}
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0,auth_service,meeting_service,nginx,auth_service:8001,meeting_service:8004
      - POSTGRES_DB=prismeet_meeting
      - POSTGRES_USER=meeting_user
      - POSTGRES_PASSWORD=meeting_password
      - POSTGRES_HOST=meeting_db
      - POSTGRES_PORT=5432
      - JWT_ALGORITHM=HS256
      - JWT_SECRET_KEY=${DJANGO_SECRET_KEY}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - CORS_ALLOWED_ORIGINS=${FRONTEND_URL}
      - REDIS_URL=redis://redis:6379/0
      - AUTH_SERVICE_URL=http://auth_service:8001
      - FRONTEND_URL=http://localhost:3000
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:80
    volumes:
      - ./services/meeting_service:/app
      - meeting_media:/app/media
    working_dir: /app
    command: >
      bash -lc "
        python manage.py makemigrations &&
        python manage.py migrate &&
        python manage.py runserver 0.0.0.0:8004
      "
    ports:
      - "8004:8004"
    depends_on:
      - meeting_db
      - redis
    networks:
      - meeting-network
      - shared-network

  #
#  # Recording Service
#  recording_service:
#    build:
#      context: ./services/recording_service
#      dockerfile: Dockerfile
#    env_file:
#      - ./services/recording_service/.env
#    volumes:
#      - ./services/recording_service:/app
#      - recording_media:/app/media
#    working_dir: /app
#    command: >
#      bash -lc "
#        python manage.py makemigrations &&
#        python manage.py migrate &&
#        python manage.py runserver 0.0.0.0:8005
#      "
#    ports:
#      - "8005:8005"
#    depends_on:
#      - recording_db
#      - redis
#    networks:
#      - recording-network
#      - shared-network

#  # Transcription Service
#  transcription_service:
#    build:
#      context: ./services/transcription_service
#      dockerfile: Dockerfile
#    env_file:
#      - ./services/transcription_service/.env
#    volumes:
#      - ./services/transcription_service:/app
#      - transcription_media:/app/media
#    working_dir: /app
#    command: >
#      bash -lc "
#        python manage.py makemigrations &&
#        python manage.py migrate &&
#        python manage.py runserver 0.0.0.0:8006
#      "
#    ports:
#      - "8006:8006"
#    depends_on:
#      - transcription_db
#      - redis
#    networks:
#      - transcription-network
#      - shared-network

  # Next.js Frontend
  frontend:
    build:
      context: .
      dockerfile: docker/frontend/Dockerfile
    env_file:
      - ./.env
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:80
      - NEXT_PUBLIC_AUTH_SERVICE_URL=http://localhost:80/api/auth
      - NEXT_PUBLIC_MEETING_SERVICE_URL=http://localhost:80/api/meetings
      - NEXT_PUBLIC_AI_SERVICE_URL=http://localhost:80/api/ai
      - NEXT_PUBLIC_MEDIA_SERVICE_URL=http://localhost:80/api/media
      - NEXT_PUBLIC_WS_URL=ws://localhost:80
    volumes:
      - ./frontend:/app
    working_dir: /app
    command: npm run dev
    ports:
      - "3000:3000"
    depends_on:
      - auth_service
      - meeting_service
    networks:
      - shared-network

  # Nginx Gateway
  gateway:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./gateway/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - auth_service
      - meeting_service
#      - ai_service
#      - media_service
#      - recording_service
#      - transcription_service
      - frontend
    networks:
      - shared-network

volumes:
  auth_postgres_data:
  meeting_postgres_data:
  ai_postgres_data:
  media_postgres_data:
  recording_postgres_data:
  transcription_postgres_data:
  auth_media:
  meeting_media:
  ai_media:
  media_media:
  recording_media:
  transcription_media:
  auth_static:
  media_static:

networks:
  auth-network:
    driver: bridge
  meeting-network:
    driver: bridge
#  ai-network:
#    driver: bridge
#  media-network:
#    driver: bridge
#  recording-network:
#    driver: bridge
#  transcription-network:
#    driver: bridge
  shared-network:
    driver: bridge